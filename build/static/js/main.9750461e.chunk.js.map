{"version":3,"sources":["utils/RecordsApi.js","components/Record.js","components/RecordForm.js","components/AmountBox.js","components/Records.js","serviceWorker.js","index.js"],"names":["api","process","REACT_APP_RECORDS_API_URL","Record","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","edit","setState","event","_this2","preventDefault","id","body","record","date","refs","value","title","amount","Number","parseInt","props","axios","put","concat","then","response","handelEditRecord","data","catch","error","console","log","message","_this3","delete","handelDeleteRecord","react_default","a","createElement","className","onClick","handleToggle","bind","handleDelete","type","defaultValue","ref","handleEdit","recordForm","recordRow","Component","RecordForm","name","obj","target","post","handelNewReocrd","onSubmit","handleSubmit","placeholder","onChange","handleChange","disabled","valid","AmountBox","_ref","text","Records","isLoad","records","get","toConsumableArray","recordIndex","indexOf","newRecords","map","item","index","objectSpread","filter","reduce","prev","curr","credit","debit","recordsComponents","_this$state","Record_Record","key","updateRecord","deleteRecord","components_AmountBox","balance","RecordForm_RecordForm","addRecord","Boolean","window","location","hostname","match","ReactDOM","render","components_Records","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9750461e.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst api = process.env.REACT_APP_RECORDS_API_URL || \"https://5c08f494ea3172001389ccc1.mockapi.io\"\r\n\r\nexport const getAll = () =>\r\naxios.get(`${api}/records`)\r\n\r\nexport const create = (body) =>\r\naxios.post(`${api}/records`,body)\r\n\r\n\r\nexport const update = (id, body) =>\r\naxios.put(`${api}/records/${id}`,body)\r\n\r\nexport const remove = (id) =>\r\naxios.delete(`${api}/records/${id}`)","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as RecordsAPI from '../utils/RecordsApi'\r\n\r\nexport default class Record extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      edit:false\r\n    };\r\n  }\r\n\r\n  handleToggle(){\r\n    this.setState({\r\n      edit: !this.state.edit\r\n    });\r\n  }\r\n\r\n  handleEdit(event){\r\n    event.preventDefault();\r\n    const record ={\r\n      date:this.refs.date.value,\r\n      title:this.refs.title.value,\r\n      amount:Number.parseInt(this.refs.amount.value, 0)\r\n    }; \r\n\r\n    RecordsAPI.update(this.props.record.id, record).then(\r\n      response => {\r\n        this.setState({edit: false});\r\n        this.props.handelEditRecord(this.props.record, response.data)\r\n      }\r\n    ).catch(\r\n      error => console.log(error.message)\r\n    )\r\n  }\r\n\r\n  handleDelete(event){\r\n    event.preventDefault();\r\n    RecordsAPI.remove(this.props.record.id).then(\r\n      response => this.props.handelDeleteRecord(this.props.record)\r\n    ).catch(\r\n      error => console.log(error.message)\r\n    )\r\n\r\n  }\r\n\r\n\r\n  recordRow(){\r\n    return (\r\n      <tr>\r\n        <td>{this.props.record.date}</td>\r\n        <td>{this.props.record.title}</td>\r\n        <td>{this.props.record.amount}</td>\r\n        <td>\r\n          <button className=\"btn btn-info mr-1\" onClick={this.handleToggle.bind(this)}>Edit</button>\r\n          <button className=\"btn btn-danger\" onClick={this.handleDelete.bind(this)}>Delete</button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  recordForm(){\r\n    return (\r\n      <tr>\r\n        <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.date} ref=\"date\"/></td>\r\n        <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.title} ref=\"title\"/></td>\r\n        <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.amount} ref=\"amount\"/></td>\r\n        <td>\r\n          <button className=\"btn btn-info mr-1\" onClick={this.handleEdit.bind(this)}>Update</button>\r\n          <button className=\"btn btn-danger\" onClick={this.handleToggle.bind(this)}>Cancel</button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n \r\n  render() {\r\n    if(this.state.edit){\r\n     return this.recordForm()\r\n    }else{\r\n     return this.recordRow()\r\n    }\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\nRecord.propTypes = {\r\n   id:PropTypes.string,\r\n   date:PropTypes.string,\r\n   title:PropTypes.string,\r\n   amount:PropTypes.number\r\n}\r\n","import React, { Component } from 'react';\r\nimport * as RecordsAPI from '../utils/RecordsApi';\r\n\r\n\r\nexport default class RecordForm extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      date:\"\",\r\n      title:\"\",\r\n      amount:\"\"\r\n    }\r\n  }\r\n\r\n  valid(){\r\n    return this.state.date && this.state.title && this.state.amount\r\n  }\r\n\r\n  handleChange(event){\r\n     let name, obj;\r\n     name = event.target.name;\r\n     this.setState((\r\n       obj={},\r\n       obj[\"\"+name]=event.target.value,\r\n       obj\r\n     ))\r\n  }\r\n\r\n  handleSubmit(event){\r\n    event.preventDefault();\r\n    const data ={\r\n      date: this.state.date, \r\n      title: this.state.title, \r\n      amount:Number.parseInt(this.state.amount, 0)\r\n    }\r\n    RecordsAPI.create(data).then(\r\n      response => this.props.handelNewReocrd(response.data),\r\n      this.setState({\r\n        date:\"\",\r\n        title:\"\",\r\n        amount:\"\"\r\n      })\r\n    ).catch(\r\n      error => console.log(error.message)\r\n    )\r\n  }\r\n\r\n \r\n  render() {\r\n\r\n    return (\r\n        <form className=\"form-inline mb-3\" onSubmit={this.handleSubmit.bind(this)}>\r\n          <div className=\"form-group mr-1\">\r\n            <input type=\"text\" className=\"form-control\" placeholder=\"Date\" onChange={this.handleChange.bind(this)} name=\"date\" value={this.state.date}/>\r\n          </div>\r\n          <div className=\"form-group mr-1\">\r\n            <input type=\"text\" className=\"form-control\" placeholder=\"Title\" onChange={this.handleChange.bind(this)} name=\"title\" value={this.state.title}/>\r\n          </div>\r\n          <div className=\"form-group mr-1\">\r\n            <input type=\"text\" className=\"form-control\" placeholder=\"Amount\" onChange={this.handleChange.bind(this)} name=\"amount\" value={this.state.amount}/>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\" disabled={!this.valid()}>Creat Record</button> \r\n        </form>\r\n      \r\n\r\n\r\n    );\r\n  }\r\n}  ","import React, { Component } from 'react';\r\n\r\nconst AmountBox = ({text ,type,amount}) =>{\r\n  return (\r\n    <div className=\"col\">\r\n      <div className=\"card\">\r\n        <div className={`card-header bg-${type} text-white`}>\r\n        {text}\r\n        </div>\r\n        <div className=\"card-body\">{amount}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default AmountBox","import React, { Component } from 'react';\r\nimport Record from './Record';\r\nimport RecordForm from './RecordForm';\r\nimport AmountBox from './AmountBox';\r\n\r\nimport * as RecordsAPI from '../utils/RecordsApi'\r\n\r\nclass Records extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      error:null,\r\n      isLoad:false,\r\n      records:[]\r\n    }\r\n  }\r\n  \r\n  componentDidMount(){\r\n    RecordsAPI.getAll().then(\r\n      response =>this.setState({\r\n        isLoad:true,\r\n        records:response.data\r\n      })\r\n    ).catch(\r\n      error => this.setState({\r\n        isLoad:true,\r\n        error\r\n      })\r\n    )    \r\n  }\r\n\r\n  addRecord(record){\r\n     this.setState({\r\n      error:null,\r\n      isLoad:true,\r\n      records:[\r\n        ...this.state.records,\r\n        record\r\n      ]\r\n     })\r\n  }\r\n\r\n  updateRecord(record, data){\r\n      const recordIndex = this.state.records.indexOf(record);\r\n      const newRecords = this.state.records.map((item, index)=>{\r\n        if(index !== recordIndex){\r\n          return item;\r\n        }\r\n        return{\r\n          ...item,\r\n          ...data\r\n        };\r\n      });\r\n      this.setState({\r\n        records: newRecords\r\n      })\r\n  }\r\n\r\n  deleteRecord(record){\r\n    const recordIndex = this.state.records.indexOf(record);\r\n    const newRecords= this.state.records.filter( (item, index) => index !== recordIndex);\r\n    this.setState({\r\n      records: newRecords\r\n    })\r\n  }\r\n\r\n  credit(){\r\n    let credits = this.state.records.filter((record) => {\r\n      return record.amount >=0;\r\n    })\r\n    return credits.reduce((prev,curr)=>{\r\n      return prev+Number.parseInt(curr.amount,0)\r\n    }, 0)\r\n  }\r\n\r\n  debit(){\r\n    let credits = this.state.records.filter((record) => {\r\n      return record.amount <0;\r\n    })\r\n    return credits.reduce((prev,curr)=>{\r\n      return prev+Number.parseInt(curr.amount,0)\r\n    }, 0)\r\n\r\n  }\r\n\r\n  balance(){\r\n    return this.credit() + this.debit();\r\n  }\r\n\r\n  render() {\r\n    const { isLoad, error, records} =  this.state;\r\n    let recordsComponents;\r\n   if(error){\r\n     recordsComponents = <div>Error: {error.message}</div>; \r\n   }else if(!isLoad){\r\n    recordsComponents = <div>Loading....</div>;\r\n   }else{\r\n     recordsComponents = ( \r\n          <table className=\"table table-bordered\">\r\n            <thead>\r\n              <tr>\r\n                <th>Date</th>\r\n                <th>Title</th>\r\n                <th>Amount</th>\r\n                <th>Action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n   {records.map((record) => \r\n    (<Record key={record.id}\r\n             record={record}  \r\n             handelEditRecord={this.updateRecord.bind(this)}  \r\n             handelDeleteRecord={this.deleteRecord.bind(this)}/>\r\n    ))}\r\n            </tbody>\r\n          </table>      \r\n      );\r\n   }\r\n   return(\r\n    <div className=\"Records\">\r\n    <h2>Records</h2>\r\n    <div className=\"row mb-3\">\r\n      <AmountBox text=\"Credit\" type=\"success\" amount={this.credit()} />\r\n      <AmountBox text=\"Debit\" type=\"danger\" amount={this.debit()}    />\r\n      <AmountBox text=\"Balance\" type=\"info\" amount={this.balance()}   />\r\n    </div>\r\n    <RecordForm  handelNewReocrd={this.addRecord.bind(this)} />\r\n    {recordsComponents}\r\n    </div>\r\n   )\r\n  }\r\n}\r\n\r\nexport default Records;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Records from './components/Records';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Records />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}